<%- include('../header') %>
 
    
    
  <div class="vc">
      
        <div class="sub-vc rounded shadow-lg">
            <div class="vc-head">
                <p>User Side</p>
                <div timer  class="timer">Time remain : <span id='timer'></span></div>
            </div>
            <p id="leaveing_message" class="leave"></p>
            
            <div id="local" class="rounded local shadow-lg"></div>
            
            <div id="remote" class="rounded remote shaow-lg "></div>
            
            <div class="vc-plugs">
                <i class="fa fa-video-camera" id="btnCam" aria-hidden="true "></i>
                <i class="fa fa-microphone " id="btnMic" aria-hidden="true "></i>
                <i class="fa fas fa-plug" id="btnPlug" aria-hidden="true"></i>
            </div>
        </div>

    </div>
    
    
    <script>
    
    const currentUrl = window.location.pathname;
    
    let parse_url = currentUrl.split('/');

    let txt = parse_url[3];
 
    let numb = txt.match(/\d/g);
    
        numb = numb.join("");
     
    let uid = parseInt(numb);
    
    let channelName = parse_url[2];
    
     let session_name = JSON.stringify({
        
            channel_name: channelName,
    }); 
    
    
    
    let totalSeconds = "";
    
   

const config = {
    mode: 'rtc',
    codec: 'vp8'
}

const options = {
    appId: '1e884982f1bf494495b45d0812f047de',
    channel: channelName,
    token: "",
    uid: uid,

}

// Retrieve a token from your token server

    
    let data = JSON.stringify({
            uid: uid,
            channel: channelName,
            role: 'audience',
            tokentype: 'uid',
    });
    
    
    
      let gettingdata = function getData(){
          const res = axios.post('/fetch_rtc_token',data , {
                 headers: {
                'Content-Type': 'application/json'
            }
          })
        return (res.then(async function(response){
                 let token = response.data.rtcToken;
                 options.token = token;
                // await startOneToOneVideoCall();
                // await userJoin();
                
                 
            }))
        }
     
     gettingdata();
     
     
     //  user room join
     
    let user_update_join = JSON.stringify({
        
            session_id: channelName,
            user_role: "User",
            roomEntryType: 'roomEnter',
    }); 
     
    let userJoin =async function user_join(){
        axios.post('https://astroera.in/api/astro-call/status-update',user_update_join,{
               headers: {
                'Content-Type': 'application/json'
            }
        })
    }
    
    
    // user_room_leave
    
     let user_update_leave = JSON.stringify({
        
            session_id: channelName,
            user_role: "User",
            roomEntryType: 'roomLeave',
    }); 
     
    let userLeave =async function user_leave(){
        axios.post('https://astroera.in/api/astro-call/status-update',user_update_leave,{
               headers: {
                'Content-Type': 'application/json'
            }
        }).then(()=>{
            window.location.href="https://astroera.in/";
        })
    }
     

const rtc = {
            client: null,
            localVideoTrack: null,
            localAudioTrack: null,
        }
        
        const btnCam = $('#btnCam');
        const btnMic = $('#btnMic');
        const btnPlug = $('#btnPlug');
        const remote = $('#remote');
        const local = $('#local');
        
        const join = async() => {
            rtc.client = AgoraRTC.createClient(config);
            await rtc.client.join(options.appId, options.channel, options.token, options.uid);
        }
        
        async function startOneToOneVideoCall() {
            join().then(() => {
                
                startVideo();
                startAudio();
                
                rtc.client.on("user-published", async (user, mediaType) => {
                    
                                       
                    await rtc.client.subscribe(user, mediaType);
                    
                    if (mediaType === "video") {
                        
                        const remoteVideoTrack = user.videoTrack;
                        
                        
                       const remotePlayerContainer = document.createElement("div");
                             remotePlayerContainer.className = "remote_user_video";
                             remotePlayerContainer.id = user.uid.toString();
                            //  remotePlayerContainer.textContent = "Remote user " + user.uid.toString();
                             remotePlayerContainer.style.width = "840px";
                             remotePlayerContainer.style.height = "580px";
                             document.body.append(remotePlayerContainer);
                             remoteVideoTrack.play(remotePlayerContainer);
                       
                        // const remotePlayerContainer = document.getElementById("remote");
                        
                        // remoteVideoTrack.play(remotePlayerContainer);

                        
                        // if(totalSeconds !== ""){
                          
                        //       if(user.uid){
                        //       startTimer();
                        //       }
                              
                        //   }else{
                              
                        //     setTimeout(function(){
                        //       if(user.uid){
                        //          startTimer();
                        //       }
                        //     },2000);
                        //   }
                        
                    }
                
                    if (mediaType === "audio") {
                        const remoteAudioTrack = user.audioTrack;
                        remoteAudioTrack.play();
                    }
                    
                    
                    
                });

                
                rtc.client.on("user-leave", (user) => {
                    
            
                    
                    userLeave();
                    
                    clearTimer();
                    
                    document.getElementById('leaveing_message').innerHTML = "Astrologer left";  
                    
                    setTimeout(()=>{
                        
                        // window.location.href="https://astroera.in/";
                        
                    },2000);
                    
                 });
                
                
                });
            
                
        }
        
        
            
        
        
        const startVideo = async() => {
            rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack({encoderConfig: "720p"});
            rtc.client.publish(rtc.localVideoTrack);
            rtc.localVideoTrack.play('local');
        }
        
        const startAudio = async() => {
            rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();
            rtc.client.publish(rtc.localAudioTrack);
            rtc.localAudioTrack.play();
        }
        
        const stopVideo = () => {
            rtc.localVideoTrack.close();
            rtc.localVideoTrack.stop();
            rtc.client.unpublish(rtc.localVideoTrack);
        }
        
        const stopAudio = () => {
            rtc.localAudioTrack.close();
            rtc.localAudioTrack.stop();
            rtc.client.unpublish(rtc.localAudioTrack);
        }
        
        
        //Toggle Camera
        
        btnCam.click(function() {
            if ($(this).hasClass('fa-video-camera')) {
                $(this).addClass('fa-video-slash');
                $(this).removeClass('fa-video-camera');
                $(this).css('color', 'red');
                stopVideo();
        
            } else {
                $(this).addClass('fa-video-camera');
                $(this).removeClass('fa-video-slash');
                $(this).css('color', 'white');
                startVideo();
        
            }
        });
        //Toggle Microphone
        btnMic.click(function() {
            if ($(this).hasClass('fa-microphone')) {
                $(this).addClass('fa-microphone-slash');
                $(this).removeClass('fa-microphone');
                $(this).css('color', 'red');
                stopAudio()
        
            } else {
                $(this).addClass('fa-microphone');
                $(this).removeClass('fa-microphone-slash');
                $(this).css('color', 'white');
                startAudio();
        
        
            }
        });
        
        //Toggle Join and Leave
        
        
        btnPlug.click(function() {
               if ($(this).hasClass('fas fa-plug')) {
                $(this).addClass('fa-window-close');
                $(this).removeClass('fas fa-plug');
                $(this).css('color', 'red');
                startOneToOneVideoCall();
                userJoin();
                
               }else{
                $(this).addClass('fas fa-plug');
                $(this).removeClass('fa-window-close');
                $(this).css('color', 'white');
        
                rtc.client.leave();
                stopVideo();
                stopAudio();
                userLeave();
                clearTimer();
                
            //   window.location.href="https://astroera.in/";
               }
        });
        
        
        //  var timer = totalSeconds;
         var minutes;
         var seconds;
          
            let startTime = function () {
                
                // console.log("t = ",totalSeconds);
                
                minutes = parseInt(totalSeconds / 60, 10);
                seconds = parseInt(totalSeconds % 60, 10);
                minutes = minutes < 10 ? minutes : minutes;
                seconds = seconds < 10 ? seconds : seconds;
                
                document.getElementById('timer').innerHTML = (`${minutes} minutes : ${seconds} seconds`);
                
                if (--totalSeconds < 0) {
                    
                    rtc.client.leave();
                    stopVideo();
                    stopAudio();
                    
                    clearTimer();
                    
                    userLeave();
                    
                    console.log("timer goes -ve");
                    
                   return ;
                    
                }
            }
                
                
        function startTimer() {
          intervalId = setInterval(startTime,1000);
        }
        
        
        function clearTimer() {
          clearInterval(intervalId);
        }
              
        
        
</script>
  
<%- include('../footer') %>
