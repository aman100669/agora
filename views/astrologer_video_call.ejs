<%- include('./header') %>

  
  
  
  
 
  <div class="vc">
        
        <div class="sub-vc rounded shadow-lg">
            <div class="vc-head">
                    <p>Astologer Side</p>
                    <div timer  class="timer">Time remain : <span id='timer'></span></div>
            </div>
            <p id="leaveing_message" class="leave"></p>
        
            <div id="local" class="rounded local shadow-lg"></div>
            
            <div id="remote" class="rounded remote shaow-lg"></div>
            
            <div class="vc-plugs">
                <i class="fa fa-video-camera" id="btnCam" aria-hidden="true "></i>
                <i class="fa fa-microphone " id="btnMic" aria-hidden="true "></i>
                <i class="fa fa-window-close" id="btnPlug" aria-hidden="true"></i>
            </div>
        </div>

    </div>
    
    <!--modal-->
    
    <button onclick="whole_kundali()" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#myModal">Kundali</button>
    
      <div class="modal fade" id="myModal">
        <div class="modal-dialog modal-xl">
          <div class="modal-content">
      
            <!-- Modal Header -->
            <div class="modal-header">
              <h4 class="modal-title">Kundali</h4>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
      
            <!-- Modal body -->
            <div class="modal-body">
             <div id="show_user_kundlii"></div>
            </div>
      
            <!-- Modal footer -->
            <!--<div class="modal-footer">-->
            <!--  <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>-->
            <!--</div>-->
           </div>
          </div>
      </div>
      
    <!--end modal section-->
    
  
    <div>
        
        <!--<p>Name: <span id="user_name"></span></p>-->
        <!--<p>Customer mobile: <span id="customer_mobile"></span></p>-->
        <!--<p>Customer query: <span id="customer_query"></span></p>-->
        <!--<p>BirthPlace: <span id="birthPlace"></span></p>-->
        <!--<p>BirthDate: <span id="birthDate"></span></p>-->
        <!--<p>Birthtime: <span id="birthtime"></span></p>-->
        <!--<p>Gender: <span id="gender"></span></p>-->
        <!--<p>Relationship status: <span id="relationship_status"></span></p>-->
        <!--<p id="pn">Partners Name: <span id="partnersName"></span></p>-->
        <!--<p id="pb">Partners BirthDate: <span id="partnersbirthDate"></span></p>-->
        <!--<p id="pbt">Partners Birthtime: <span id="partnersbirthtime"></span></p>-->
        <!--<p id="pbp">Partners BirthPlace: <span id="partners_birthPlace"></span></p>-->
        <!--<p>Occupation: <span id="occupation"></span></p>-->
        <!--<p>Latitude: <span id="latitude"></span></p>-->
        <!--<p>Longitude: <span id="longitude"></span></p>-->
        <!--<p>Timezone: <span id="timezone"></span></p>-->
        
    </div>
    
    <script>
    
       const currentUrl = window.location.pathname;
    
    let parse_url = currentUrl.split('/');
    
    let txt = parse_url[2];
    
    let numb = txt.match(/\d/g);
    
        numb = numb.join("");
     
    let uid = parseInt(numb);
    
    let channelName = parse_url[3];
    
    let session_name = JSON.stringify({
        
            channel_name: channelName,
    }); 
    
    
     // timer
    
    
         let totalSeconds = "";

         let request_status = "";
  
    let getSessionDetails = function session_details(){
        axios.post('https://astroera.in/api/astro-call/exportSessionDetails',session_name,{
               headers: {
                'Content-Type': 'application/json'
            }
        }).then(async function(response)  {
            
                totalSeconds = await(Math.floor((response.data.total_time)*60));
                
                request_status = await (response.data.request_status);


                if(request_status == 5){
                    window.location.href="https://astroera.in/";
                }else if(request_status == 7){
                    window.location.href="https://astroera.in/";
                }else if(request_status == 8){
                    window.location.href="https://astroera.in/";
                }else{
                    await startOneToOneVideoCall();
                    await astroJoin();
                }
                
                
                
                // await console.log(totalSeconds);
            
                // document.getElementById('user_name').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.fullname));
                // document.getElementById('customer_mobile').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.customer_mobile));
                // document.getElementById('customer_query').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.customer_query));
                // document.getElementById('birthPlace').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.birthPlace));
                // document.getElementById('birthDate').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.birthDate));
                // document.getElementById('birthtime').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.birthtime));
                // document.getElementById('gender').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.gender));
                // document.getElementById('relationship_status').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.relationship_status));
                
                // let relation_ship = "";
                
                //     relation_ship = await (JSON.stringify(response.data.form_meta.partner_check));
                    
                //     if(relation_ship){
                        
                //           document.getElementById('partnersName').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.partnersName));
                //           document.getElementById('partnersbirthDate').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.partnersbirthDate));
                //           document.getElementById('partners_birthPlace').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.partners_birthPlace));
                //           document.getElementById('partnersbirthtime').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.partnersbirthtime));
                        
                //     }else{
                        
                //           document.getElementById('pn').style.display = "none";
                //           document.getElementById('pb').style.display = "none";
                //           document.getElementById('pbt').style.display = "none"; 
                //           document.getElementById('pbp').style.display = "none";
                //     }
                
                // document.getElementById('occupation').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.occupation));
                // document.getElementById('latitude').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.latitude));
                // document.getElementById('longitude').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.longitude));
                // document.getElementById('timezone').innerHTML =await JSON.parse(JSON.stringify(response.data.form_meta.timezone));
                 
                
                
            })
    }
    
    
  getSessionDetails();  
    
    

    
const config = {
    mode: 'rtc',
    codec: 'vp8'
}

const options = {
    appId: '1e884982f1bf494495b45d0812f047de',
    channel: channelName,
    token: "",
    uid: uid,

}

// Retrieve a token from your token server

    
    let data = JSON.stringify({
            uid: uid,
            channel: channelName,
            role: 'publisher',
            tokentype: 'uid',
    });
    
    
    
      let gettingdata = function getData(){
          const res = axios.post('/fetch_rtc_token',data , {
                 headers: {
                'Content-Type': 'application/json'
            }
          })
        return (res.then(async (response)=> {
                 let token = response.data.rtcToken;
                 options.token = token;
                  
            }))
        }
     
     gettingdata();
     
     
    //  astro room join
     
    let astro_update_join = JSON.stringify({
        
            session_id: channelName,
            user_role: "Host",
            roomEntryType: 'roomEnter',
    }); 
     
    let astroJoin = async function astro_join(){
        axios.post('https://astroera.in/api/astro-call/status-update',astro_update_join,{
               headers: {
                'Content-Type': 'application/json'
            }
        })
    }
    
    
    // astro_room_leave
    
     let astro_update_leave = JSON.stringify({
        
            session_id: channelName,
            user_role: "Host",
            roomEntryType: 'roomLeave',
    }); 
     
    let astroLeave =async function astro_leave(){
        axios.post('https://astroera.in/api/astro-call/status-update',astro_update_leave,{
               headers: {
                'Content-Type': 'application/json'
            }
        }).then(()=>{
            window.location.href="https://astroera.in/";
        })
    }
     

const rtc = {
            client: null,
            localVideoTrack: null,
            localAudioTrack: null,
        }
        
        const btnCam = $('#btnCam');
        const btnMic = $('#btnMic');
        const btnPlug = $('#btnPlug');
        const remote = $('#remote');
        const local = $('#local');
        
        const join = async() => {
            rtc.client = AgoraRTC.createClient(config);
            await rtc.client.join(options.appId, options.channel, options.token, options.uid);
        }
        
        async function startOneToOneVideoCall() {
            join().then(() => {
                
                startVideo();
                startAudio();
                rtc.client.on('user-published', async(user, mediaType) => {

                    if (rtc.client._users.length > 1) {
                        rtc.client.leave();
                        remote.html('<div class="roomMessage"><p class="full">Please Wait Room is Full</p></div>');
                        return;
                    } else {
                        remote.html('');
                    }
                    
        
                    await rtc.client.subscribe(user, mediaType);
                    
                    if (mediaType === 'video') {
                        
                        const remoteVideoTrack = user.videoTrack;
                        
                       const remotePlayerContainer = document.createElement("div");
                             remotePlayerContainer.className = "remote_user_video";
                             remotePlayerContainer.id = user.uid.toString();
                            //  remotePlayerContainer.textContent = "Remote user " + user.uid.toString();
                             remotePlayerContainer.style.width = "840px";
                             remotePlayerContainer.style.height = "580px";
                             document.body.append(remotePlayerContainer);
                             remoteVideoTrack.play(remotePlayerContainer);
                        
                        
                       
                    //     const remotePlayerContainer = document.getElementById("remote");
                        
                    //     remoteVideoTrack.play(remotePlayerContainer);
                        
                        if(totalSeconds !== ""){
                          
                              if(user.uid){
                                    startTimer();
                                 }
                              
                          }else{
                              
                            setTimeout(function(){

                              if(user.uid){

                                 startTimer();
                              }

                            },2000);
                          }
                        
                    }
                    
                    if (mediaType === 'audio') {
                        const remoteAudioTrack = user.audioTrack;
                        remoteAudioTrack.play()
                    }
                    
                    rtc.client.on("user-left",(f,g)=>{
                    
                        if(g === 'Quit'){
                     
                         astroLeave();
                         
                         clearTimer();

                         document.getElementById('leaveing_message').innerHTML = "User left";

                        }
                    
                 });
                    
                    
                });
            });
        }
        
        
        const startVideo = async() => {
            rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack({encoderConfig: "720p"});
            rtc.client.publish(rtc.localVideoTrack);
            rtc.localVideoTrack.play('local');
        }
        
        const startAudio = async() => {
            rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();
            rtc.client.publish(rtc.localAudioTrack);
            rtc.localAudioTrack.play();
        }
        
        const stopVideo = () => {
            rtc.localVideoTrack.close();
            rtc.localVideoTrack.stop();
            rtc.client.unpublish(rtc.localVideoTrack);
        }
        
        const stopAudio = () => {
            rtc.localAudioTrack.close();
            rtc.localAudioTrack.stop();
            rtc.client.unpublish(rtc.localAudioTrack);
        }
        
        
        //Toggle Camera
        
        btnCam.click(function() {
            if ($(this).hasClass('fa-video-camera')) {
                $(this).addClass('fa-video-slash');
                $(this).removeClass('fa-video-camera');
                $(this).css('color', 'red');
                stopVideo();
        
            } else {
                $(this).addClass('fa-video-camera');
                $(this).removeClass('fa-video-slash');
                $(this).css('color', 'white');
                startVideo();
        
            }
        });
        //Toggle Microphone
        btnMic.click(function() {
            if ($(this).hasClass('fa-microphone')) {
                $(this).addClass('fa-microphone-slash');
                $(this).removeClass('fa-microphone');
                $(this).css('color', 'red');
                stopAudio()
        
            } else {
                $(this).addClass('fa-microphone');
                $(this).removeClass('fa-microphone-slash');
                $(this).css('color', 'white');
                startAudio();
        
        
            }
        });
        
        //Toggle Join and Leave
        
        btnPlug.click(function() {
            if ($(this).hasClass('fas fa-plug')) {
                $(this).addClass('fa-window-close');
                $(this).removeClass('fas fa-plug');
                $(this).css('color', 'red');


                if(request_status == 5){
                    window.location.href="https://astroera.in/";
                }else if(request_status == 7){
                    window.location.href="https://astroera.in/";
                }else if(request_status == 8){
                    window.location.href="https://astroera.in/";
                }else{

                    startOneToOneVideoCall();
                    astroJoin();
                }
                
                
                
            } else {
                $(this).addClass('fas fa-plug');
                $(this).removeClass('fa-window-close');
                $(this).css('color', 'white');
        
                rtc.client.leave();
                stopVideo();
                stopAudio();
                astroLeave();
                clearTimer();
                // window.location.href="https://astroera.in/";
            }
        });
        
       
        
        //  var timer = totalSeconds;
         var minutes;
         var seconds;
          
            let startTime = function () {
                
                // console.log("t = ",totalSeconds);
                
                minutes = parseInt(totalSeconds / 60, 10);
                seconds = parseInt(totalSeconds % 60, 10);
                minutes = minutes < 10 ? minutes : minutes;
                seconds = seconds < 10 ? seconds : seconds;
                
                document.getElementById('timer').innerHTML = (`${minutes} minutes : ${seconds} seconds`);
                
                if (--totalSeconds < 0) {
                    
                    rtc.client.leave();
                    stopVideo();
                    stopAudio();
                    
                    clearTimer();
                    
                    astroLeave();
                    
                    console.log("timer goes -ve");
                    
                   return ;
                    
                }
            }
                
                
        function startTimer() {
          intervalId = setInterval(startTime,1000);
        }
        
        
        function clearTimer() {
          clearInterval(intervalId);
        }
        
        
         let whole_kundali = function getkund(){
             
             axios.post('/getkundl',{
                    headers: {
                     'Content-Type': 'application/json'
                 }
             }).then((response)=>{
                 
                 document.getElementById('show_user_kundlii').innerHTML = response.data;
                //  console.log(data.response);
                
            
          })
    }
        

   </script>
   
   <script src="https://agoraastro.astroera.in/views/kundali/kundali.js"></script>

<%- include('./footer') %>